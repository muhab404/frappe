[ // "table": "attribute",
    // {
    //     "attributes": [
    //         {
    //             "atrrId": "",
    //             "type": "relation",
    //             "relationType": "parent",
    //             "connection": {
    //                 "nodeIds": [
    //                     "node id 1",
    //                     "node id 2"
    //                 ],
    //                 "contextId": "Marketing"
    //             }
    //         }
    //     ]
    // }
    // Node Table
    {
        "nodeId": "",
        "contexts": {
            "initial": "original content id",
            "Marketing": "contentId",
            "contextId3": "contentId",
            "contextId4": "contentId",
            "contextId5": "contentId"
        },
        "contentId": "initial content"
    },
    // Node Content
    {
        "nodeContentID": "",
        "nodeType": "",
        "property": {
            "color": "red"
        }
    },
    // Example of Node Content Object for Marketing context
    {
        "nodeContentID": "1",
        "nodeType": "Node Content",
        "property": {}
    },
    // node and node content are separated because versioning and variations
    // Attr Object
    // {
    //     "attrId": "",
    //     "type": "relation",
    //     "realtionType": "parent",
    //     "nodeIds": [
    //         2,
    //         43
    //     ]
    // },
    // // second
    // {
    //     "type": "relation",
    //     "value": "parent",
    //     "connection": {
    //         "nodeIds": [
    //             "node id 1",
    //             "node id 2"
    //         ],
    //         "contextId": "context id 1" // the cons of this approach that i can't connect between 2 nodes in different contexts
    //     }
    // },
    // TASK: choose the best scenrieo for context and how to search about it's nodes using the best way
    /* 
==== The New Approach ==== 
*/
    // attribute Table
    {
        "relations": [
            { //relation between 2 nodes in the same context ==> after edit
                "id": "relation 1",
                "source": "node content id 1",
                "target": "node content id 2",
                "relationType": "parent"
            },
            { //relation between 2 nodes in the different contexts
                "1": {
                    "nodeId": "2",
                    "contextId": "Marketing"
                },
                "2": {
                    "nodeId": "3",
                    "contextId": "development"
                },
                "relationType": "parent"
            },
            { //relation between 2 contexts
                "1": {
                    "contextId": "1"
                },
                "2": {
                    "contextId": "2"
                },
                "relationType": "parent"
            },
            { //relation between node and context
                "1": {
                    "nodeId": "1",
                    "contextId": "Marketing"
                },
                "2": {
                    "contextId": "Development"
                },
                "relationType": "parent"
            }
        ]
    },
    // context object 
    // {
    //     "relations": [
    //         "relation 1"
    //     ]
    // },
    // Node Content Table for Context
    {
        "nodeContentID": "",
        "nodeType": "context",
        "property": {
            "title": "Marketing",
            "description": "dfshdh dfsg",
            "relations": [
                "relation 1",
                "...",
                "relation 300"
            ]
        }
    },
    // Node Table
    {
        "id": 324535,
        "nodeType": "Tag",
        "contextsIds": [
            1,
            3,
            43,
            45,
            6
        ],
        "contentId": 0
    },
    // Node Content Table
    {
        "0": {
            "text": "original"
        },
        "4": {
            "text": "this for marketing"
        },
        "3": {
            "text": "this for finance"
        },
        "1": {
            "text": "this for development"
        }
    },
    /* 
==== The New Approach after Maged update ==== 
*/
    // Node Table
    {
        "nodeId": "node 1",
        "contexts": {
            "initial": "original content id",
            "Buisness Context 238": "content1",
            "contextId3": "contentId",
            "contextId4": "contentId",
            "contextId5": "contentId"
        },
        "contentId": "initial content id" // if i had this in the contexts object, so what is the purpose of this
    },
    {
        "nodeId": "node 2",
        "nodeType": "",
        "contexts": {
            "initial": "original content id",
            "Planning Context 239": "content14",
            "contextId4": "contentId",
            "contextId5": "contentId"
        },
        "contentId": "initial content id" // if i had this in the contexts object, so what is the purpose of this
    },
    // Node Content
    {
        "nodeContentID": "",
        "contentType": "",
        "property": {}
    },
    // Example on Node Content Table of Context type
    {
        "nodeContentID": "",
        "nodeType": "context",
        "property": {
            "title": "Marketing",
            "description": "dfshdh dfsg",
            "relations": [
                "relation 1",
                "...",
                "relation 300"
            ]
        }
    },
    {
        "relations": [
            { //relation between 2 nodes in the same context ==> after edit
                "id": "relation 1",
                "source": "node content id 1",
                "target": "node content id 2",
                "relationType": "parent"
            }
        ]
    },
    {
        "id": "relation 1",
        "source": "node1",
        "target": "node2",
        "relationType": "parent"
    },
    /*
     ========================================================================
                            Implementation & Analysis 
     ========================================================================
    */
    // Nodes
    {
        "Node1": {
            "node_id": "node1",
            "node_type": "Node",
            "contexts": {
                "initial context": "original node 1 content id",
                "Buisness Context 238": "content1",
                "Planning Context 239": "Content9"
            }
        },
        "Node2": {
            "node_id": "node2",
            "node_type": "Node",
            "contexts": {
                "initial": "node 2 - original content id",
                "Buisness Context 238": "Content3",
                "Planning Context 239": "Content7"
            }
        },
        "Node3": {
            "node_id": "node3",
            "node_type": "Node",
            "contexts": {
                "initial context": "node 3 - original content id"
            }
        },
        "Node4": {
            "node_id": "node4",
            "node_type": "Node",
            "contexts": {
                "initial context": "node 4 - original content id",
                "Planning Context 239": "content4"
            }
        },
        "Initial Context": {
            "node_id": "Initial Context",
            "node_type": "context",
            "contexts": {
                "initial context": "Initial Context content"
            }
        },
        "Work Context 231": {
            "node_id": "Work Context 231",
            "node_type": "context",
            "contexts": {
                "initial": "Work Context 231 - original content id" // second, i need here that context is held in the context, not context content
            }
        },
        "Buisness Context 238": {
            "node_id": "Buisness Context 238",
            "node_type": "context",
            "contexts": {
                "initial": "Buisness Context 238 content"
            }
        },
        "Planning Context 239": {
            "node_id": "Planning Context 239",
            "node_type": "context",
            "contexts": {
                "Work Context 231": "Planning Context 239 content 1",
                "test Context 231": "Planning Context 239 content 2"
            }
        }
    },
    // Node Contents
    {
        "content1": {
            "nodeContentID": "content1",
            "contentType": "Text",
            "property": {
                "title": "node content 1 title"
            }
        },
        "content2": {
            "nodeContentID": "content2",
            "nodeType": "Node",
            "property": {
                "title": "node content 2 title"
            }
        },
        "content3": {
            "nodeContentID": "content3",
            "nodeType": "Node",
            "property": {
                "title": "node content 3 title"
            }
        },
        "Node 1 - Original Content id": {
            "nodeContentID": "Node 1 - Original Content id",
            "nodeType": "Node",
            "property": {}
        },
        "Node 2 - Original Content id": {
            "nodeContentID": "Node 2 - Original Content id",
            "nodeType": "Node",
            "property": {
                "blocks": [
                    "id 1"
                ]
            }
        },
        "Node 3 - Original Content id": {
            "nodeContentID": "Node 3 - Original Content id",
            "nodeType": "Node",
            "property": {}
        },
        "content4": {
            "nodeContentID": "content4",
            "nodeType": "Node",
            "property": {
                "title": "node content 4 title"
            }
        },
        "Initial Context content": {
            "nodeContentID": "Initial Context content",
            "nodeType": "context",
            "property": {
                "title": "Initial",
                "description": "Initial description",
                "relations": [ // is this will matter in the initial context?
                ]
            }
        },
        "Work Context 231 content": {
            "nodeContentID": "Work Context 231 content",
            // "nodeType": "context",
            "nodeIds": [
                "node 7",
                "Buisness Context 238 content",
                "Planning Context 239 content"
            ],
            "property": {
                "title": "Work",
                "description": "Work description",
                "relations": [
                    "relation 1"
                ]
            }
        },
        "Buisness Context 238 content": {
            "nodeContentID": "Buisness Context 238 content",
            "contentType": "context",
            "nodeIds": [
                "node 2"
            ], // hold only solo nodes or contexts
            "property": {
                "title": "Buisness",
                "description": "Buisness description",
                "relations": [
                    "relation 1"
                ]
            }
        },
        "Planning Context 239 content": {
            "nodeContentID": "Planning Context 239 content",
            "contentType": "context",
            "nodeIds": [
                "node 4",
                "node 2"
            ],
            "property": {
                "title": "Planning",
                "description": "Planning description",
                "relations": []
            }
        }
    },
    // Relations
    {
        "relations": [
            {
                "id": "relation 1",
                "source": "node1",
                "target": "node2",
                "relationType": "siblings"
            }
        ]
    }
    /*
       =========== Problems =========== 
     */
    //  1- to reach the "Work Context 231" context childs or relations there are two ways, 
    //     first is to search in relations array,
    //     second is to search in nodes tables about nodes that hold in their context object 
    //     about field holds this context id
    /*
       =========== Questions =========== 
     */
    // Q1- we know that relations array hold the relations between 2 node contents in some context, 
    //     but what if we need to represent the relation between node and context, in other words
    //     I have a node in a context and this node not has relations with other nodes, 
    //     how can I get this node when I get the nodes of the context
    // Q2- does context has versions and variations like normal node?
    // Q3- is each node has one node content, and node content can have any number of versions and variations
    //     or node content here represent each block in the node, so that node can have many blocks,
    //     and each block can have many versions or variations 
    // Q4- is the initial context will have it's relations in the relation array or not
    /* 
       =========== Use Cases =========== 
    */
    // USE CASE 1
    // user opened the app and clicked a context, this context has node contents inside it 
    // that have relations with each other and has also solo node contents,
    // how to get all these nodes
    // USE CASE 2
]
// ==== Relations ====
// 1- Node Content - Node Content Relation
// 2- Node Content Inside Context Relation
// 3- Context Inside Context Relation
// 4- Context - Context Relation
// ---------------------------------------------
// ==== Rules ====
// 1- every thing is a node
// 2- node can be node, context, or any other type
// 3- every node can have many content and content can have versions and variations
// 4- context can hold one or many nodes, or can hold one or many contexts, node can hold
// 5- node can hold one or many contexts, is this possible?
// 4- ""PROBLEM"": is every node content can be a context or another type? because if this is allowed, 
//                 so we need make a redesign from scratch, why? 
//                 because node content not a independant node, but this is node part, so if want to transform the node content to context, 
//                 i need the node properties first
{
    "content_id": "65278518c6db2ed87a75a9fc",
    "content_type": "Context",
    "node_ids": [
        {
            "node_id": "3213543",
            "node_type": "node",
            "node_content": {
                "content_type": "text",
                "properties": {
                    "title": "sdf",
                    "blocks": [
                        "node id 1",
                        "node id 2"
                    ]
                }
            }
        },
        {
            "node_id": "56764",
            "node_type": "node",
            "node_content": {
                "content_type": "tag",
                "properties": {
                    "title": "tew",
                }
            }
        },
        {
            "node_id": "3566",
            "node_type": "context",
            "node_content": {
                "content_type": "context",
                "properties": {
                    "title": "context title",
                }
            }
        }
    ],
    "properties": {
        "title": "context node content title",
        "relations": [
            {
                "_id": "6526e1cc49e5b2e522a093ad",
                "source": "N-00001",
                "target": "N-00002",
                "relation_type": "parent",
                "__v": 0
            },
        ]
    },
    "__v": 0
}

{
    "node_id": "3213543",
    "node_type": "node",
    "node_content": {
        "content_type": "text",
        "property": {
            "title": "sdf",
            "blocks": []
        }
    }
}